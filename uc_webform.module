<?php

/**
 * Drupal Core Hook Functions
 */

/**
 * Implementation of hook_menu().
 */
function uc_webform_menu() {
  $items = array();

  $items['cart/delete-form'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_webform_submission_delete_products_form'),
    //'access callback' => This defaults to user_access
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function uc_webform_theme() {
  return array(
    'uc_webform_products' => array(
      'arguments' => array('products' => NULL),
    ),
    'uc_webform_product' => array(
      'arguments' => array('product' => NULL),
    ),
  );
}

/**
 * Confirm form to delete all of the products from the cart that are associated with
 * mandatory webform submission elements.
 */
function uc_webform_submission_delete_products_form() {

  $question = t('This product was a mandatory part of a form submission. If you remove this product from your cart, all products associated with your form submission will also be removed. Are you sure you want to delete this product?');

  $destination = 'cart';

  return confirm_form(array(), NULL, $destination, $question, t('Delete'), t('Cancel'));
}

function uc_webform_submission_delete_products_form_submit($form, &$form_state) {

  // Remove all items from the current webform submission from the cart
  $cart_items = uc_cart_get_contents();

  foreach ($cart_items as $cart_item) {
    if (isset($cart_item->data['webform_sid'])) {
      uc_cart_remove_item($cart_item->nid, $cart_item->cart_id, $cart_item->data);
    }
  }

  $form_state['redirect'] = 'cart';
}

/**
 * Implementation of hook_form_alter().
 */
function uc_webform_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'uc_cart_view_form':
      $count = 0;
      while (isset($form['items'][$count])) {
        if (isset($form['items'][$count]['data']['#value'])) {
          $data = unserialize($form['items'][$count]['data']['#value']);

          if (($data['webform_ctype'] == 'product_list') || ($data['webform_ctype'] == 'product')) {
            // Check to see if the product was a mandatory field in the webform submission.
            $component_info = db_fetch_array(db_query("SELECT mandatory, extra FROM {webform_component} WHERE nid = %d AND cid = %d", $data['webform_nid'], $data['webform_cid']));

            $component_info['extra'] = unserialize($component_info['extra']);

            // Users may not edit the quantity of a product if the quantity was disabled in the webform.
            if ($component_info['extra']['disabled'] == 1) {
              $form['items'][$count]['qty']['#disabled'] = TRUE;
              $form['items'][$count]['qty']['#value'] = db_result(db_query("SELECT data FROM {webform_submitted_data} WHERE nid = %d AND sid = %d AND cid = %d", $data['webform_nid'], $data['webform_sid'], $data['webform_cid']));;
            }

            // Force the user to remove *all* webform-related products from the cart if they want to remove *one* mandatory webform-related product from the cart.
            if ($component_info['mandatory'] == 1) {
              $form['items'][$count]['remove']['#type'] = 'markup';
              $form['items'][$count]['remove']['#value'] = l(t('Delete'), "cart/delete-form", array('query' => drupal_get_destination()));
            }

            if ($data['webform_ctype'] == 'product_list') {
              // Users may not edit the quantity of a product_list webform product.
              $form['items'][$count]['qty']['#disabled'] = TRUE;
              $form['items'][$count]['qty']['#value'] = 1; // If you don't specicfy #value here, all products will be removed if any product is removed.
            }
          }
        }
        $count++;
      }
      break;
  }
}

/**
 * Implementation of hook_theme_registry_alter().
 *
 * There is a good article about this here:
 * http://www.lullabot.com/articles/overriding-theme-functions-in-modules
 */
function uc_webform_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['webform_components_form'])) {
    $theme_registry['webform_components_form']['function'] = 'uc_webform_webform_components_form';
  }
}

/**
 * Override 'theme_webform_components_form($form)', found in webform.components.inc
 * Remove the 'Clone', 'Edit' and 'Delete' links from the hidden Order Status component if
 * it is part of a registration form.
 */
function uc_webform_webform_components_form($form) {
  // Add CSS to display submission info. Don't preprocess because this CSS file is used rarely.
  drupal_add_css(drupal_get_path('module', 'webform') . '/css/webform-admin.css', 'theme', 'all', FALSE);
  drupal_add_js(drupal_get_path('module', 'webform') . '/js/webform-admin.js', 'module', 'header', FALSE, TRUE, FALSE);

  drupal_add_tabledrag('webform-components', 'order', 'sibling', 'webform-weight');
  drupal_add_tabledrag('webform-components', 'match', 'parent', 'webform-pid', 'webform-pid', 'webform-cid');

  $node = $form['#node'];

  $header = array(t('Name'), t('Type'), t('Value'), t('Mandatory'), t('Weight'), array('data' => t('Operations'), 'colspan' => 3));
  $rows = array();

  // Add a row containing form elements for a new item.
  unset($form['add']['name']['#title'], $form['add_type']['#description']);
  $form['add']['name']['#attributes']['rel'] = t('New component name');
  $form['add']['name']['#attributes']['class'] = 'webform-default-value';
  $form['add']['cid']['#attributes']['class'] = 'webform-cid';
  $form['add']['pid']['#attributes']['class'] = 'webform-pid';
  $form['add']['weight']['#attributes']['class'] = 'webform-weight';
  $row_data = array(
    drupal_render($form['add']['name']),
    drupal_render($form['add']['type']),
    '',
    drupal_render($form['add']['mandatory']),
    drupal_render($form['add']['cid']) . drupal_render($form['add']['pid']) . drupal_render($form['add']['weight']),
    array('colspan' => 3, 'data' => drupal_render($form['add']['add'])),
  );
  $add_form = array('data' => $row_data, 'class' => 'draggable webform-add-form');
  $form_rendered = FALSE;

  if (!empty($node->webform['components'])) {
    $component_tree = array();
    $page_count = 1;
    _webform_components_tree_build($node->webform['components'], $component_tree, 0, $page_count);
    $component_tree = _webform_components_tree_sort($component_tree);
    // Build the table rows.
    function _webform_components_form_rows($node, $cid, $component, $level, &$form, &$rows, &$add_form) {
      // Create presentable values.
      if (drupal_strlen($component['value']) > 30) {
        $component['value'] = drupal_substr($component['value'], 0, 30);
        $component['value'] .= '...';
      }
      $component['value'] = check_plain($component['value']);

      // Remove individual titles from the mandatory and weight fields.
      unset($form['components'][$cid]['mandatory']['#title']);
      unset($form['components'][$cid]['pid']['#title']);
      unset($form['components'][$cid]['weight']['#title']);

      // Add special classes for weight and parent fields.
      $form['components'][$cid]['cid']['#attributes']['class'] = 'webform-cid';
      $form['components'][$cid]['pid']['#attributes']['class'] = 'webform-pid';
      $form['components'][$cid]['weight']['#attributes']['class'] = 'webform-weight';

      // Build indentation for this row.
      $indents = '';
      for ($n = 1; $n <= $level; $n++) {
        $indents .= '<div class="indentation">&nbsp;</div>';
      }

      // Add each component to a table row.
      // Alteration: I've added this check to remove the 'Edit', 'Clone', 'Delete' links when necessary.
      $registration = 0;
      foreach ($form['#node']->webform['components'] as $comp) {
        $registration = isset($comp['extra']['registration']) ? $comp['extra']['registration'] : 0;
        if ($registration == 1) {
          break;
        }
      }

      if (($registration == 1) && ($component['form_key'] == 'order_status')) {
        $row_data = array(
          $indents . filter_xss($component['name']),
          t($component['type']),
          ($component['value'] == '') ? '-' : $component['value'],
          drupal_render($form['components'][$cid]['mandatory']),
          drupal_render($form['components'][$cid]['cid']) . drupal_render($form['components'][$cid]['pid']) . drupal_render($form['components'][$cid]['weight']),
          '-',
          '-',
          '-',
        );
      }
      else {
        $row_data = array(
          $indents . filter_xss($component['name']),
          t($component['type']),
          ($component['value'] == '') ? '-' : $component['value'],
          drupal_render($form['components'][$cid]['mandatory']),
          drupal_render($form['components'][$cid]['cid']) . drupal_render($form['components'][$cid]['pid']) . drupal_render($form['components'][$cid]['weight']),
          l(t('Edit'), 'node/' . $node->nid . '/webform/components/' . $cid, array('query' => drupal_get_destination())),
          l(t('Clone'), 'node/' . $node->nid . '/webform/components/' . $cid . '/clone', array('query' => drupal_get_destination())),
          l(t('Delete'), 'node/' . $node->nid . '/webform/components/' . $cid . '/delete', array('query' => drupal_get_destination())),
        );
      }

      $row_class = 'draggable';
      if (!webform_component_feature($component['type'], 'group')) {
        $row_class .= ' tabledrag-leaf';
      }
      if ($component['type'] == 'pagebreak') {
        $row_class .= ' tabledrag-root webform-pagebreak';
        $row_data[0] = array('class' => 'webform-pagebreak', 'data' => $row_data[0]);
      }
      $rows[] = array('data' => $row_data, 'class' => $row_class);
      if (isset($component['children']) && is_array($component['children'])) {
        foreach ($component['children'] as $cid => $component) {
          _webform_components_form_rows($node, $cid, $component, $level + 1, $form, $rows, $add_form);
        }
      }

      // Add the add form if this was the last edited component.
      if (isset($_GET['cid']) && $component['cid'] == $_GET['cid'] && $add_form) {
        $add_form['data'][0] = $indents . $add_form['data'][0];
        $rows[] = $add_form;
        $add_form = FALSE;
      }
    }
    foreach ($component_tree['children'] as $cid => $component) {
      _webform_components_form_rows($node, $cid, $component, 0, $form, $rows, $add_form);
    }
  }
  else {
    $rows[] = array(array('data' => t('No Components, add a component below.'), 'colspan' => 9));
  }

  // Append the add form if not already printed.
  if ($add_form) {
    $rows[] = $add_form;
  }

  $output = '';
  $output .= theme('table', $header, $rows, array('id' => 'webform-components'));
  $output .= drupal_render($form);
  return $output;
}

/**
 * Ubercart Hook Functions
 */

/**
 * Implementation of hook_order().
 */
function uc_webform_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'submit':
      foreach ($arg1->products as $product) {
        if (isset($product->data['webform_sid'])) {
          $message = l(t('View form submission'), 'node/' . $product->data['webform_nid'] . '/submission/' . $product->data['webform_sid']);

          // Add an admin comment that links to the webform submission.
          uc_order_comment_save($arg1->order_id, $arg1->uid, $message, 'admin');

          // Add the webform submission id and webform node id to the uc_orders table
          $data['webform_sid'] = $product->data['webform_sid'];
          $data['webform_nid'] = $product->data['webform_nid'];
          db_query("UPDATE {uc_orders} SET data = '%s' WHERE order_id = %d", serialize($data), $arg1->order_id);

          break;
        }
      }
      break;

    case 'update':
      foreach ($arg1->products as $product) {
        if (isset($product->data['webform_sid'])) {
          // Find the component ID of the hidden field.
          $result_cid = db_result(db_query("SELECT cid FROM {webform_component} WHERE nid = %d AND form_key = 'order_status'", $product->data['webform_nid']));

          if ($result_cid) {
            $status = t('Order #') . $arg1->order_id . ': ' . drupal_strtoupper($arg2);

            // Update the hidden Order Status field of the webform submission.
            db_query("UPDATE {webform_submitted_data} SET data = '%s' WHERE nid = %d AND sid = %d AND cid = %d", $status, $product->data['webform_nid'], $product->data['webform_sid'], $result_cid);
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_cart_item().
 *
 * This usage currently depends on a patch to ubercart: http://drupal.org/node/744956
 */
function uc_webform_cart_item($op, &$item) {
  switch ($op) {
    case 'remove':
      $data = unserialize($item->data);
      if ($data['webform_ctype'] == 'product_list') {
        db_query("DELETE FROM {webform_submitted_data} WHERE nid = %d AND sid = %d AND data = '%s'", $data['webform_nid'], $data['webform_sid'], $item->nid);
      }
      elseif ($data['webform_ctype'] == 'product') {
        db_query("DELETE FROM {webform_submitted_data} WHERE nid = %d AND sid = %d AND cid = %d", $data['webform_nid'], $data['webform_sid'], $data['webform_cid']);
      }
      break;
  }
}

/**
 * Webform Hook Functions
 */

/**
 * Define callbacks that can be used as select list options.
 */
function uc_webfom_webform_select_options_info() {
  $items = array();

  $items['products'] = array(
    'title' => t('Products'),
    'options callback' => '_uc_webform_product_options',
  );

  return $items;
}

/**
 * Option list containing products.
 */
function _uc_webform_product_options() {

  $products = array();

  // http://api.ubercart.org/api/function/uc_product_types/2
  $types = uc_product_types();

  $result = db_query("SELECT nid, title FROM {node} WHERE type IN (". db_placeholders($types, 'varchar') .") ORDER BY title", $types);

  while ($row = db_fetch_object($result)) {
    $products[$row->nid] = t("$row->title");
  }

  return $products;
}

/**
 * Define components to Webform.
 *
 * Form more information: http://drupal.org/node/886014
 */

function uc_webform_webform_component_info() {
  $components = array();

  $components['product_list'] = array(
    'label' => t('Product list'),
    'description' => t('Add a list of products to your webform.'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'required' => TRUE,
    )
  );
  $components['product'] = array(
    'label' => t('Product'),
    'description' => t('Add a single product to your webform.'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'required' => TRUE,
    )
  );

  return $components;
}

/**
 * Respond to a Webform submission being inserted.
 */
function uc_webform_webform_submission_insert($node, $submission) {

  // If the latest webform submission has products in it, remove the
  // previous webform submission products and add the new ones. Otherwise,
  // allow the form to be submitted without incident.
  foreach ($node->webform['components'] as $component) {
    if (($component['type'] == 'product_list') || ($component['type'] == 'product')) {
      $remove = TRUE;
      break;
    }
  }

  if ($remove) {
    // Remove items from previous webform submissions from the cart
    $cart_items = uc_cart_get_contents();

    foreach ($cart_items as $cart_item) {
      if (isset($cart_item->data['webform_sid']) && ($cart_item->data['webform_sid'] != $submission->sid)) {
        uc_cart_remove_item($cart_item->nid, $cart_item->cart_id, $cart_item->data);
      }
    }

    // Add new items to the cart
    foreach ($node->webform['components'] as $component) {
      if ($component['type'] == 'product_list') {
        if (array_key_exists($component['cid'], $submission->data)) {
          $key = $component['cid'];
          foreach ($submission->data[$key]['value'] as $product) {
            if ($product != 0) {
              uc_cart_add_item($product, 1, array('webform_sid' => $submission->sid, 'webform_nid' => $node->nid, 'webform_ctype' => 'product_list', 'webform_cid' => $component['cid']));
            }
          }
        }
      }
      elseif ($component['type'] == 'product') {
        if (array_key_exists($component['cid'], $submission->data)) {
          $key = $component['cid'];
          $qty = (integer) $submission->data[$key]['value'][0];

          $component_data = unserialize(db_result(db_query('SELECT extra FROM {webform_component} WHERE cid = %d AND nid = %d', $component['cid'], $node->nid)));
          $product = $component_data['product'];

          if ($qty > 0) {
            uc_cart_add_item($product, $qty, array('webform_sid' => $submission->sid, 'webform_nid' => $node->nid, 'webform_ctype' => 'product', 'webform_cid' => $component['cid']));
          }
        }
      }
    }
  }
}

/**
 * Modify a Webform submission before it is saved to the database.
 *
 * This is a total hack, but it ensures that the correct data is saved to webform_submitted_data.
 * I don't know how else to fix it. Patches welcome!
 */
function uc_webform_webform_submission_presave($node, &$submission) {
  foreach ($node->webform['components'] as $component) {
    if ($component['type'] == 'product_list') {
      if ($component['extra']['multiple'] == 1) {  // Checkboxes
        $index = 0;
        foreach ($submission->data[$component['cid']]['value'] as $prod_key => $prod_val) {
          if ($prod_val == 0) {
            unset($submission->data[$component['cid']]['value'][$prod_key]);
          }
          else {
            $submission->data[$component['cid']]['value'][$index] = $submission->data[$component['cid']]['value'][$prod_val];
            unset($submission->data[$component['cid']]['value'][$prod_val]);
          }
          $index++;
        }
      }
    }
  }
}

/**
 * Implementation of hook_webform_component_insert().
 *
 * Respond to a Webform component being inserted into the database.
 */
function uc_webform_webform_component_insert($component) {
  if (($component['extra']['registration'] == 1) && (($component['type'] == 'product') || ($component['type'] == 'product_list'))) {
    // Check to see whether the hidden field already exists.
    $result = db_result(db_query("SELECT cid FROM {webform_component} WHERE nid = %d AND form_key = 'order_status'", $component['nid']));

    $extra = array('conditional_operator' => '=');
    if (!$result) {
      // Insert a hidden field into the webform.
      db_query("INSERT INTO {webform_component} (nid, cid, form_key, name, type, value, extra, mandatory, weight) VALUES (%d, %d, 'order_status', 'Order Status', 'hidden', 'Did not complete checkout', '%s', 0, 100)", $component['nid'], $component['cid'] + 1, serialize($extra));
    }
  }
}

/**
 * Respond to a Webform component being updated in the database.
 */
function uc_webform_webform_component_update($component) {
  if (($component['extra']['registration'] == 1) && (($component['type'] == 'product') || ($component['type'] == 'product_list'))) {

    // We need to check to see whether the hidden field already exists.
    // We also need to find the max component id in the webform.
    $results = db_query("SELECT cid, form_key FROM {webform_component} WHERE nid = %d", $component['nid']);

    $components_info['cids'] = array();
    $components_info['form_keys'] = array();
    while ($result = db_fetch_array($results)) {
      array_push($components_info['cids'], $result['cid']);
      array_push($components_info['form_keys'], $result['form_key']);
    }

    $extra = array('conditional_operator' => '=');
    if (!in_array('order_status', $components_info['form_keys'])) {
      // Insert a hidden field into the webform.
      db_query("INSERT INTO {webform_component} (nid, cid, form_key, name, type, value, extra, mandatory, weight) VALUES (%d, %d, 'order_status', 'Order Status', 'hidden', 'Did not complete checkout', '%s', 0, 100)", $component['nid'], max($components_info['cids']) + 1, serialize($extra));
    }
  }
}

/**
 * Webform API Functions (not hooks)
 */

/**
 * I define two new components: 'product_list', modeled heavily after the
 * 'select' component, and 'product', which is modeled after 'textfield'.
 *
 * Product List Component
 */

/**
 * Implementation of _webform_defaults_component().
 */
function _webform_defaults_product_list() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'email' => 1,
    'mandatory' => 0,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'description' => '',
    ),
  );
}

/**
 * Implementation of hook_theme().
 * This implementation is module-specfic, though.
 * Implementation of _webform_theme_component().
 * This allows each Webform component to add information into hook_theme().
 */
function _webform_theme_product_list() {
  return array(
    'webform_display_product_list' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Generate the form for editing a component.
 */
function _webform_edit_product_list($component) {
  $form = array();
  $types = uc_product_types();

  $result = db_query("SELECT nid, title FROM {node} WHERE type IN (". db_placeholders($types, 'varchar') .") " ."ORDER BY title", $types);

  while ($row = db_fetch_object($result)) {
    $products[$row->nid] = check_plain($row->title);
  }

  // Most options are stored in the "extra" array, which stores any settings unique to a particular component type.
  $form['extra']['products'] = array(
    '#type' => 'select',
    '#title' => t('Products'),
    '#default_value' => $component['extra']['products'],
    '#multiple' => TRUE,
    '#description' => t('Please select your products.'),
    '#weight' => -3,
    '#size' => 20,
    '#required' => TRUE,
    '#options' => $products,
  );
  $form['extra']['multiple'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multiple'),
    '#default_value' => $component['extra']['multiple'],
    '#description' => t('Check this option if the user is allowed to select multiple products.'),
    '#weight' => -2,
  );
  $form['extra']['registration'] = array(
    '#type' => 'checkbox',
    '#title' => t('Registration'),
    '#default_value' => $component['extra']['registration'],
    '#description' => t('Check this option if this component will be a part of a registration form.'),
    '#weight' => -2,
  );

  return $form;
}

/**
 * Render a Webform component to be part of a form.
 *
 */
function _webform_render_product_list($component, $value = NULL) {

  $products = array();

  foreach ($component['extra']['products'] as $val) {
    $node = node_load($val);

    $product['title'] = check_plain($node->title);
    $product['price'] = round($node->sell_price, 2);
    $products[$node->nid] = $product;
  }

  if ($component['extra']['multiple'] == 0) {
    $form_item = array(
      '#type' => 'radios',
      '#title' => $component['name'],
      '#weight' => $component['weight'],
      '#description'   => _webform_filter_descriptions($component['extra']['description']),
      '#prefix' => '<div class="webform-component-'. $component['type'] .'" id="webform-component-'. $component['form_key'] .'">',
      '#suffix' => '</div>',
      '#required' => $component['mandatory'],
      '#options' => theme('uc_webform_products', $products),
    );
  }
  elseif ($component['extra']['multiple'] == 1) {
    $form_item = array(
      '#type' => 'checkboxes',
      '#title' => $component['name'],
      '#weight' => $component['weight'],
      '#description'   => _webform_filter_descriptions($component['extra']['description']),
      '#prefix' => '<div class="webform-component-'. $component['type'] .'" id="webform-component-'. $component['form_key'] .'">',
      '#suffix' => '</div>',
      '#required' => $component['mandatory'],
      '#options' => theme('uc_webform_products', $products),
    );
  }

  if (isset($value)) {
    $form_item['#default_value'] = check_plain($value);
  }

  return $form_item;
}

/**
 * Theme function for when a product is rendered in a form.
 *
 */
function theme_uc_webform_products($products) {

  $output = array();
  foreach ($products as $nid => $product) {
    $output[$nid] = '<span>' . $product['title'] . ', ' . t('Price:') . ' ' . variable_get('uc_currency_sign', '$') . $product['price'] . '</span>';
  }

  return $output;
}

/**
 * Display the result of a submission for a component.
 *
 */
function _webform_display_product_list($component, $value, $format = 'html') {

  $products = array();

  if (isset($value)) {
    foreach ($value as $product) {
      if ($product != 0) {
        $node = node_load($product);
        $product_title = "$node->title, " . t('Price: $') . round($node->sell_price, 2);
        array_push($products, $product_title);
      }
    }
  }

  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_product_list',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => $products,
  );
}

/**
 * Format the text output for the product_list component.
 */
function theme_webform_display_product_list($element) {

  if (isset($element['#value'])) {
    $output = (count($element['#value']) > 1) ? theme('item_list', $element['#value']) : $element['#value'][0];
  }

  return $output;
}

/**
 * Calculate and returns statistics about results for this component.
 *
 * This is mostly useless right now because it doesn't filter for completed checkouts.
 */
function _webform_analysis_product_list($component, $sids = array(), $single = FALSE) {

  $options = _uc_webform_products($component);
  $show_other_results = $single;

  $sid_placeholders = count($sids) ? array_fill(0, count($sids), "'%s'") : array();
  $sid_filter = count($sids) ? " AND sid IN (" . implode(",", $sid_placeholders) . ")" : "";

  $option_operator = $show_other_results ? 'NOT IN' : 'IN';
  $placeholders = count($options) ? array_fill(0, count($options), "'%s'") : array();
  $query = 'SELECT data, count(data) as datacount ' .
    ' FROM {webform_submitted_data} ' .
    ' WHERE nid = %d ' .
    ' AND cid = %d ' .
    " AND data != ''" . $sid_filter .
    ($placeholders ? ' AND data ' . $option_operator . ' (' . implode(',', $placeholders) . ')' : '') .
    ' GROUP BY data ';

  $count_query = 'SELECT count(*) as datacount ' .
    ' FROM {webform_submitted_data} ' .
    ' WHERE nid = %d ' .
    ' AND cid = %d ' .
    " AND data != ''" . $sid_filter;

  $result = db_query($query, array_merge(array($component['nid'], $component['cid']), $sids, array_keys($options)));
  $rows = array();
  $normal_count = 0;
  while ($data = db_fetch_array($result)) {
    $display_option = $single ? $data['data'] : $options[$data['data']];
    $rows[$data['data']] = array(_webform_filter_xss($display_option), $data['datacount']);
    $normal_count += $data['datacount'];
  }

  if (!$show_other_results) {
    // Order the results according to the normal options array.
    $ordered_rows = array();
    foreach (array_intersect_key($options, $rows) as $key => $label) {
      $ordered_rows[] = $rows[$key];
    }

    $rows = $ordered_rows;
  }

  return $rows;
}

/**
 * Return the result of a component value for display in a table.
 */
function _webform_table_product_list($component, $value) {

  $results = "";

  if (isset($value)) {
    foreach ($value as $product) {
      $node = node_load($product);
      $results .= "$node->model<br />";
    }
  }

  return $results;
}

/**
 * Return the header for this component to be displayed in a CSV file.
 */
function _webform_csv_headers_product_list($component, $export_options) {
  $headers = array(
    0 => array(),
    1 => array(),
    2 => array(),
  );

  $options = _uc_webform_products($component);

  if ($component['extra']['multiple'] && $export_options['select_format'] == 'separate') {
    $headers[0][] = '';
    $headers[1][] = $component['name'];

    foreach ($options as $key => $value) {
      $headers[2][] = $value;
    }
  }
  else {
    $headers[0][] = '';
    $headers[1][] = '';
    $headers[2][] = $component['name'];
  }
  return $headers;
}

/**
 * Format the submitted data of a component for CSV downloading.
 */
function _webform_csv_data_product_list($component, $export_options, $value) {

  $options = _uc_webform_products($component);
  $data = array();

  if ($component['extra']['multiple']) {
    foreach ($options as $key => $item) {
      $index = array_search($key, (array) $value);
      if ($index !== FALSE) {
        $data[] = ($export_options['select_format'] == 'separate') ? 'X' : $key;
        unset($value[$index]);
      }
      elseif ($export_options['select_format'] == 'separate') {
        $data[] = '';
      }
    }
  }
  else {
    $data = isset($options[$value[0]]) ? $options[$value[0]] : $value[0];
  }

  if ($component['extra']['multiple'] && $export_options['select_format'] == 'compact') {
    $data = implode(',', (array) $data);
  }

  return $data;
}

function _uc_webform_products($component) {

  $options = array();
  $count = 0;

  foreach ($component['extra']['products'] as $product) {
    $node = node_load($product);
    $options["$node->nid"] = "$node->model";
    $count++;
  }

  return $options;
}

/**
 * Product Component
 */

/**
 * Implementation of _webform_defaults_component().
 */
function _webform_defaults_product() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'email' => 1,
    'mandatory' => 0,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'description' => '',
    ),
  );
}

/**
 * Generate the form for editing a component.
 */
function _webform_edit_product($component) {
  $form = array();

  // Get a list of products
  $types = uc_product_types();
  $result = db_query("SELECT nid, title FROM {node} WHERE type IN (". db_placeholders($types, 'varchar') .") " ."ORDER BY title", $types);
  while ($row = db_fetch_object($result)) {
    $products[$row->nid] = $row->title;
  }

  $form['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Quantity'),
    '#default_value' => $component['value'],
    '#description' => t('The default quantity of product.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 0,
  );
  $form['extra']['product'] = array(
    '#type' => 'select',
    '#title' => t('Product'),
    '#default_value' => $component['extra']['product'],
    '#weight' => -3,
    '#description' => t('Please select a product.'),
    '#options' => $products,
  );
  $form['extra']['registration'] = array(
    '#type' => 'checkbox',
    '#title' => t('Registration'),
    '#default_value' => $component['extra']['registration'],
    '#description' => t('Check this option if this component will be a part of a registration form.'),
    '#weight' => -2,
  );
  $form['display']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $component['extra']['width'],
    '#description' => t('Width of the textfield.') . ' ' . t('Leaving blank will use the default size.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 0,
    '#parents' => array('extra', 'width'),
  );
  $form['display']['disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disabled'),
    '#return_value' => 1,
    '#description' => t('Make this field non-editable. Useful for setting an unchangeable default value.'),
    '#weight' => 3,
    '#default_value' => $component['extra']['disabled'],
    '#parents' => array('extra', 'disabled'),
  );

  return $form;
}

/**
 * Render a Webform component to be part of a form.
 */
function _webform_render_product($component, $value = NULL) {

  $node = node_load($component['extra']['product']);
  $product = array('title' => check_plain($node->title), 'price' => round($node->sell_price, 2));

  $element = array(
    '#type' => 'textfield',
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#size' => $component['extra']['width'],
    '#description' => $component['extra']['description'],
    '#default_value' => isset($value) ? check_plain($value[0]) : check_plain($component['value']),
    '#field_suffix' => theme('uc_webform_product', $product),
    '#required' => $component['mandatory'],
    '#disabled' => $component['extra']['disabled'],
    '#element_validate' => array('_webform_render_product_validate'),
  );

  // This is so that products whose quantity is disabled are added to the cart correctly.
  if ($component['extra']['disabled']) {
    $element['#value'] = isset($value) ? check_plain($value[0]) : check_plain($component['value']);
  }

  return $element;
}

/**
 * Theme the the display of an individual product when rendered in a webform.
 */
function theme_uc_webform_product($product) {

  $output = '<span>' . $product['title'] . ', ' . t('Price:') . ' ' . variable_get('uc_currency_sign', '$') . $product['price'] . '</span>';

  return $output;
}

/**
 * Validate product entry
 */
function _webform_render_product_validate($element, &$form_state) {
  if (!empty($element['#value'])) {
    $match = preg_match('/\A[0-9]+\Z/', $element['#value']);
    if (($match == 0) || $match == FALSE) {
      form_error($element, t('Please enter a non-negative integer.'));
    }
  }
}

/**
 * Display the result of a submission for a component.
 */
function _webform_display_product($component, $value, $format = 'html') {

  $node = node_load($component['extra']['product']);
  $product_info = array(t('Name:') . ' ' . $node->title, t('Sku:') . ' ' . $node->model, t('Quantity:') . ' ' . $value[0]);

  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_product',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => $product_info,
  );
}

/**
 * Implementation of hook_theme().
 * Module-specific
 * Implementation of _webform_theme_component().
 * This allows each Webform component to add information into hook_theme().
 */
function _webform_theme_product() {
  return array(
    'webform_display_product' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Format the text output for the product component.
 */
function theme_webform_display_product($element) {
  return theme('item_list', $element['#value']);
}

/**
 * Implementation of _webform_analysis_component().
 *
 * This is mostly useless right now because it doesn't filter for completed checkouts.
 */
function _webform_analysis_product($component, $sids = array()) {

  $results = db_query("SELECT data FROM {webform_submitted_data} WHERE cid = %d", $component['cid']);

  $nonblanks = 0;
  $submissions = 0;
  $total = 0;
  $min = 999999; // This seems retarded, but I don't know how else to do it.
  $max = 0;

  while ($data = db_fetch_array($results)) {
    $num = trim($data['data']);
    if (drupal_strlen($num) > 0) {
      $nonblanks++;
      $total += $num;
      if ($num < $min) {
        $min = $num;
      }
      elseif ($num > $max) {
        $max = $num;
      }
    }
    $submissions++;
  }

  $rows[0] = array(t('Left Blank'), ($submissions - $nonblanks));
  $rows[1] = array(t('User entered value'), $nonblanks);
  $rows[2] = array(t('Min'), $min);
  $rows[3] = array(t('Max'), $max);
  $rows[4] = array(t('Total'), $total);
  return $rows;
}

/**
 * Implementation of _webform_table_component().
 */
function _webform_table_product($component, $value) {
  return check_plain(empty($value[0]) ? '' : $value[0]);
}

/**
 * Implementation of _webform_csv_headers_component().
 */
function _webform_csv_headers_product($component, $export_options) {
  $header = array();
  $node = node_load($component['extra']['product']);

  $header[0] = '';
  $header[1] = $component['name'];
  $header[2] = $node->model . ' ' . t('Quantity');
  return $header;
}

/**
 * Implementation of _webform_csv_data_component().
 */
function _webform_csv_data_product($component, $export_options, $value) {
  return !isset($value[0]) ? '' : $value[0];
}