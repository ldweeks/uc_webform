<?php

/**********************************
 * Drupal Core Hook Functions
 **********************************/

/**
* Implementation of hook_form_alter().
* Note: I'll need this later, perhaps, for alter ubercart and/or webform forms.
*/
/*function uc_webform_form_alter(&$form, &$form_state, $form_id) {
  dpm($form, "Form");
  dpm($form_state, "Form State");
  dpm($form_id, "Form ID");
}*/

/**********************************
 * Ubercart Hook Functions
 **********************************/

function uc_webform_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'submit':
      foreach ($arg1->products as $product) {
        if (isset($product->data['webform_sid'])) {
          $message = l("View form submission", 'node/' . $product->data['webform_nid'] . '/submission/' . $product->data['webform_sid']);
          uc_order_comment_save($arg1->order_id, $arg1->uid, $message, 'admin');
    
          break;
        }
      }
      break;
  }
}

/**********************************
 * Webform Hook Functions
 **********************************/

/**
 * Define callbacks that can be used as select list options.
 */
function uc_webfom_webform_select_options_info() {
  $items = array();

  $items['products'] = array(
    'title' => t('Products'),
    'options callback' => '_uc_webform_product_options',
  );

  return $items;
}

/**
 * Option list containing products.
 */
function _uc_webform_product_options() {
  
  $products = array();
  
  // http://api.ubercart.org/api/function/uc_product_types/2
  $types = uc_product_types();
  
  $result = db_query("SELECT nid, title FROM {node} WHERE type IN (". db_placeholders($types, 'varchar') .") " ."ORDER BY title", $types);
  
  while ($row = db_fetch_object($result)) {
    $products[$row->nid] = t("$row->title");
  }
  
  return $products;
}

/**
 * Define components to Webform.
 * 
 * Form more information: http://drupal.org/node/886014
 */
 
function uc_webform_webform_component_info() {
  $components = array();

  $components['product_list'] = array(
    'label' => t('Product list'),
    'description' => t('Add a list of products to your webform.'),
    'features' => array(
      // Add content to CSV downloads. Defaults to TRUE.
      'csv' => TRUE,
      // Show this field in e-mailed submissions. Defaults to TRUE.
      'email' => TRUE,
      // This field may be toggled as required or not. Defaults to TRUE.
      'required' => TRUE,
    )
  );
  $components['product'] = array(
    'label' => t('Product'),
    'description' => t('Add a single product to your webform.'),
    'features' => array(
      // Add content to CSV downloads. Defaults to TRUE.
      'csv' => TRUE,
      // Show this field in e-mailed submissions. Defaults to TRUE.
      'email' => TRUE,
      // This field may be toggled as required or not. Defaults to TRUE.
      'required' => TRUE,
    )
  );
  
  return $components;
}

/**
 * Respond to a Webform submission being inserted.
 */
function uc_webform_webform_submission_insert($node, $submission) {

  //Remove items from previous webform submissions from the cart
  $cart_items = uc_cart_get_contents();

  foreach ($cart_items as $cart_item) {
    if(isset($cart_item->data['webform_sid']) && ($cart_item->data['webform_sid'] != $submission->sid)) {
      uc_cart_remove_item($cart_item->nid, $cart_item->cart_id, $cart_item->data);
    }
  }

  // Add new items to the cart
  foreach ($node->webform['components'] as $component) {
    if ($component['type'] == 'product_list') {
      if (array_key_exists($component['cid'], $submission->data)) {
        $key = $component['cid'];
        foreach ($submission->data[$key]['value'] as $product) {
          if ($product != 0) {
            uc_cart_add_item($product, 1, array('webform_sid' => $submission->sid, 'webform_nid' => $node->nid));
          }
        }
      }
    } elseif ($component['type'] == 'product') {
      if (array_key_exists($component['cid'], $submission->data)) {
        $key = $component['cid'];
        $qty = (integer) $submission->data[$key]['value'][0];

        $component_data = unserialize(db_result(db_query("SELECT extra FROM {webform_component} WHERE cid = %d AND nid = %d", $component['cid'], $node->nid)));
        $product = $component_data['product'];

        if ($qty > 0) {
          uc_cart_add_item($product, $qty, array('webform_sid' => $submission->sid, 'webform_nid' => $node->nid));
        }
      }
    }
  }
}

/**********************************
 * Webform API Functions (not hooks)
 **********************************/

/**
 * I define two new components: 'product_list', modeled heavily after the 
 * 'select' component, and 'product', which is modeled after 'textfield'.
 *
 * Product List Component
 */

/**
 * Specify the default properties of a component.
 */
function _webform_defaults_product_list() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'email' => 1,
    'mandatory' => 0,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'description' => '',
    ),
  );
}

/**
 * Generate the form for editing a component.
 */
function _webform_edit_product_list($component) {
  $form = array();

  // Disabling the description if not wanted.
  $form['description'] = array();
  
  // http://api.lullabot.com/uc_product_types
  $types = uc_product_types();
  
  $result = db_query("SELECT nid, title FROM {node} WHERE type IN (". db_placeholders($types, 'varchar') .") " ."ORDER BY title", $types);
  
  while ($row = db_fetch_object($result)) {
    $products[$row->nid] = $row->title;
  }
  
  // Most options are stored in the "extra" array, which stores any settings unique to a particular component type.
  $form['extra']['products'] = array(
    '#type' => 'select',
    '#title' => t('Products'),
    '#default_value' => $component['extra']['products'],
    '#multiple' => TRUE,
    '#description' => t('Please select your products.'),
    '#weight' => -3,
    '#size' => 20,
    '#required' => TRUE,
    '#options' => $products,
  );
  $form['extra']['multiple'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multiple'),
    '#default_value' => $component['extra']['multiple'],
    '#description' => t('Check this option if the user is allowed to select multiple products.'),
    '#weight' => -2,
  );
  /*$form['extra']['aslist'] = array(
    '#type' => 'checkbox',
    '#title' => t('Listbox'),
    '#return_value' => 'Y',
    '#default_value' => $component['extra']['aslist'],
    '#description' => t('Check this option if you want the select component to be of listbox type instead of radiobuttons or checkboxes.'),
  );*/
  
  return $form;
}

/**
 * Render a Webform component to be part of a form.
 *
 */
function _webform_render_product_list($component, $value = NULL) {

  $products = array();
  
  foreach($component['extra']['products'] as $val) {
    $node = node_load($val);
    
    $product_title = '<span>' . t("$node->title") . ', Price: $' . round($node->sell_price, 2) . '</span>';
    $products[$node->nid] = t($product_title);
  }
  
  if ($component['extra']['multiple'] == 0) {
    $form_item = array(
      '#type' => 'radios',
      '#title' => $component['name'],
      '#weight' => $component['weight'],
      '#description'   => _webform_filter_descriptions($component['extra']['description']),
      '#prefix' => '<div class="webform-component-'. $component['type'] .'" id="webform-component-'. $component['form_key'] .'">',
      '#suffix' => '</div>',
      '#options' => $products,
    );
  }
  elseif ($component['extra']['multiple'] == 1) {
    $form_item = array(
      '#type' => 'checkboxes',
      '#title' => $component['name'],
      '#weight' => $component['weight'],
      '#description'   => _webform_filter_descriptions($component['extra']['description']),
      '#prefix' => '<div class="webform-component-'. $component['type'] .'" id="webform-component-'. $component['form_key'] .'">',
      '#suffix' => '</div>',
      '#options' => $products,
    );
  }  
  
  if (isset($value)) {
    $form_item['#default_value'] = $value;
  }
    
  return $form_item;
}

/**
 * Display the result of a submission for a component.
 * 
 */
function _webform_display_product_list($component, $value, $format = 'html') {

  $products = array();
  
  if (isset($value)) {
    foreach($value as $product) {
      if($product != 0) {
        $node = node_load($product);
        $product_title = t("$node->title") . ', Price: $' . round($node->sell_price, 2);
        array_push($products, t($product_title));
      }
    }
  }

  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_product_list',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => $products,
  );
}

/**
 * Module specific instance of hook_theme().
 *
 * This allows each Webform component to add information into hook_theme().
 */
function _webform_theme_product_list() {
  return array(
    'webform_display_product_list' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Format the text output for the product_list component.
 */
function theme_webform_display_product_list($element) {

  if (isset($element['#value'])) {
    $output = (count($element['#value']) > 1) ? theme('item_list', $element['#value']) : $element['#value'][0];
  }

  return $output;
}

/**
 * Calculate and returns statistics about results for this component.
 */
function _webform_analysis_product_list($component, $sids = array(), $single = FALSE) {

  $options = _uc_webform_products($component);
  $show_other_results = $single;

  $sid_placeholders = count($sids) ? array_fill(0, count($sids), "'%s'") : array();
  $sid_filter = count($sids) ? " AND sid IN (" . implode(",", $sid_placeholders) . ")" : "";

  $option_operator = $show_other_results ? 'NOT IN' : 'IN';
  $placeholders = count($options) ? array_fill(0, count($options), "'%s'") : array();
  $query = 'SELECT data, count(data) as datacount ' .
    ' FROM {webform_submitted_data} ' .
    ' WHERE nid = %d ' .
    ' AND cid = %d ' .
    " AND data != ''" . $sid_filter .
    ($placeholders ? ' AND data ' . $option_operator . ' (' . implode(',', $placeholders) . ')' : '') .
    ' GROUP BY data ';

  $count_query = 'SELECT count(*) as datacount ' .
    ' FROM {webform_submitted_data} ' .
    ' WHERE nid = %d ' .
    ' AND cid = %d ' .
    " AND data != ''" . $sid_filter;

  $result = db_query($query, array_merge(array($component['nid'], $component['cid']), $sids, array_keys($options)));
  $rows = array();
  $normal_count = 0;
  while ($data = db_fetch_array($result)) {
    $display_option = $single ? $data['data'] : $options[$data['data']];
    $rows[$data['data']] = array(_webform_filter_xss($display_option), $data['datacount']);
    $normal_count += $data['datacount'];
  }

  if (!$show_other_results) {
    // Order the results according to the normal options array.
    $ordered_rows = array();
    foreach (array_intersect_key($options, $rows) as $key => $label) {
      $ordered_rows[] = $rows[$key];
    }

    $rows = $ordered_rows;
  }

  return $rows;
}

/**
 * Return the result of a component value for display in a table.
 */
function _webform_table_product_list($component, $value) {
  
  $results = "";

  if (isset($value)) {
    foreach($value as $product) {
      $node = node_load($product);
      $results .= "$node->model<br>";
    }
  }
 
  return $results;
}

/**
 * Return the header for this component to be displayed in a CSV file.
 */
function _webform_csv_headers_product_list($component, $export_options) {
  $headers = array(
    0 => array(),
    1 => array(),
    2 => array(),
  );

  $options = _uc_webform_products($component);

  if ($component['extra']['multiple'] && $export_options['select_format'] == 'separate') {
    $headers[0][] = '';
    $headers[1][] = $component['name'];

    foreach ($options as $key => $value) {      
      $headers[2][] = $value;
    }
  }
  else {
    $headers[0][] = '';
    $headers[1][] = '';
    $headers[2][] = $component['name'];
  }
  return $headers;
}

/**
 * Format the submitted data of a component for CSV downloading.
 */
function _webform_csv_data_product_list($component, $export_options, $value) {

  $options = _uc_webform_products($component);
  $data = array();

  if ($component['extra']['multiple']) {
    foreach ($options as $key => $item) {
      $index = array_search($key, (array) $value);
      if ($index !== FALSE) {
        $data[] = ($export_options['select_format'] == 'separate') ? 'X' : $key;
        unset($value[$index]);
      }
      elseif ($export_options['select_format'] == 'separate') {
        $data[] = '';
      }
    }
  }
  else {
    $data = isset($options[$value[0]]) ? $options[$value[0]] : $value[0];
  }

  if ($component['extra']['multiple'] && $export_options['select_format'] == 'compact') {
    $data = implode(',', (array) $data);
  }

  return $data;
}

function _uc_webform_products($component) {

  $options = array();
  $count = 0;

  foreach ($component['extra']['products'] as $product) {      
    $node = node_load($product);
    $options["$node->nid"] = "$node->model";
    $count++;
  }

  return $options;
}

/**
 * Product Component
 */

/**
 * Specify the default properties of a component.
 */
function _webform_defaults_product() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'email' => 1,
    'mandatory' => 0,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'description' => '',
    ),
  );
}

/**
 * Generate the form for editing a component.
 */
function _webform_edit_product($component) {
  $form = array();

  // Get a list of products
  $types = uc_product_types();
  $result = db_query("SELECT nid, title FROM {node} WHERE type IN (". db_placeholders($types, 'varchar') .") " ."ORDER BY title", $types);
  while ($row = db_fetch_object($result)) {
    $products[$row->nid] = $row->title;
  }

  $form['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Quantity'),
    '#default_value' => $component['value'],
    '#description' => t('The default quantity of product.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 0,
  );
  $form['extra']['product'] = array(
    '#type' => 'select', 
    '#title' => t('Product'), 
    '#default_value' => $component['extra']['product'], 
    '#weight' => -1,
    '#description' => t('Please select a product.'),
    '#options' => $products,
  );
  $form['validation']['max_qty'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Quantity'),
    '#default_value' => $component['extra']['max_qty'],
    '#description' => t('Maximum number of products.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 2,
    '#parents' => array('extra', 'max_qty'),
  );
  $form['display']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $component['extra']['width'],
    '#description' => t('Width of the textfield.') . ' ' . t('Leaving blank will use the default size.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 0,
    '#parents' => array('extra', 'width'),
  );
  $form['display']['disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disabled'),
    '#return_value' => 1,
    '#description' => t('Make this field non-editable. Useful for setting an unchangeable default value.'),
    '#weight' => 3,
    '#default_value' => $component['extra']['disabled'],
    '#parents' => array('extra', 'disabled'),
  );

  return $form;
}

/**
 * Render a Webform component to be part of a form.
 *
 */
function _webform_render_product($component, $value = NULL) {

  $node = node_load($component['extra']['product']);
  $product_title = '<span>' . t("$node->title") . ', Price: $' . round($node->sell_price, 2) . '</span>';
  
  $element = array(
    '#type' => 'textfield',
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#size' => $component['extra']['width'],
    '#description' => $component['extra']['description'],
    '#default_value' => isset($value) ? $value[0] : $component['value'],
    '#field_suffix' => $product_title,
    '#required' => $component['mandatory'],
    '#disabled' => $component['extra']['disabled'],
  );
 
  return $element;
}

/**
 * Display the result of a submission for a component.
 */
function _webform_display_product($component, $value, $format = 'html') {

  $node = node_load($component['extra']['product']);
  $product_info = array("Name: $node->title", "Sku: $node->model", "Quantity: $value[0]");

  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_product',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => $product_info,
  );
}

/**
 * Module specific instance of hook_theme().
 *
 * This allows each Webform component to add information into hook_theme().
 */
function _webform_theme_product() {
  return array(
    'webform_display_product' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Format the text output for the product component.
 */
function theme_webform_display_product($element) {
  return theme('item_list', $element['#value']);
}

/**
 * Implementation of _webform_analysis_component().
 * This is totally broken. It should limit the analysis to webform submissions
 * that ended with a completed checkout. Instead, it tallies all submissions.
 *
 */
function _webform_analysis_product($component, $sids = array()) {
  
  $results = db_query("SELECT data FROM {webform_submitted_data} WHERE cid = %d", $component['cid']);

  $nonblanks = 0;
  $submissions = 0;
  $total = 0;
  $min = 999999; // This is retarded, but it's late.
  $max = 0;

  while ($data = db_fetch_array($results)) {
    $num = trim($data['data']);
    if (drupal_strlen($num) > 0) {
      $nonblanks++;
      $total += $num;
      if ($num < $min) {
        $min = $num;
      } elseif ($num > $max) {
        $max = $num;
      }
    }
    $submissions++;
  }

  $rows[0] = array(t('Left Blank'), ($submissions - $nonblanks));
  $rows[1] = array(t('User entered value'), $nonblanks);
  $rows[2] = array(t('Min'), $min);
  $rows[3] = array(t('Max'), $max);
  $rows[4] = array(t('Total'), $total);
  return $rows;
}

/**
 * Implementation of _webform_table_component().
 */
function _webform_table_product($component, $value) {
  dpm($component);
  return check_plain(empty($value[0]) ? '' : $value[0]);
}

/**
 * Implementation of _webform_csv_headers_component().
 */
function _webform_csv_headers_product($component, $export_options) {
  $header = array();
  $node = node_load($component['extra']['product']);

  $header[0] = '';
  $header[1] = $component['name'];
  $header[2] = $node->model . ' Quantity';
  return $header;
}

/**
 * Implementation of _webform_csv_data_component().
 */
function _webform_csv_data_product($component, $export_options, $value) {
  return !isset($value[0]) ? '' : $value[0];
}