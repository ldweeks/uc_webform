<?php

/**********************************
 * Drupal Core Hook Functions
 **********************************/

/**
* Implementation of hook_perm().
*/
function lucas_perm() {
  return array('create registration_product', 'edit own registration_product');
} 

/**
* Implementation of hook_access().
*/
function lucas_access($op, $node, $account) {

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create registration_product', $account);
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own registration_product', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
* Implementation of hook_form().
*/
function lucas_form(&$node) {
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  return $form;
}

/**
* Implementation of hook_enable().
*/
function lucas_enable() {

  // Here, I add the product class information directly into the database.
  db_query("INSERT INTO {uc_product_classes} (pcid, name, description) VALUES ('%s', '%s', '%s')", 'registration_product', 'Registration Product', 'A registration product allows store owners to sell registrations.');
  
  uc_product_add_default_image_field('registration_product');

  // These next two if statements are here to prevent the module from repeatedly 
  // adding these attributes when the module is enabled/disabled.
  $exists = db_result(db_query("SELECT name FROM {uc_attributes} WHERE name = '%s'", 'registration_key'));
  if (!($exists)) {
    db_query("INSERT INTO {uc_attributes} (name, label, ordering, required, display, description) VALUES ('%s', '%s', '%d', '%d', '%d', '%s')", 'registration_key', 'Registration Key', 0, 0, 0, 'A registration key for a registration form submission.');
  }

  $exists = db_result(db_query("SELECT name FROM {uc_attributes} WHERE name = '%s'", 'registration_form_id'));
  if (!($exists)) {
    db_query("INSERT INTO {uc_attributes} (name, label, ordering, required, display, description) VALUES ('%s', '%s', '%d', '%d', '%d', '%s')", 'registration_form_id', 'Registration Form ID', 0, 0, 0, 'A registration form ID for a registration form.');
  }
  
  // These two functions see the newly added product class, and then build up a product node-type for that class.
  node_types_rebuild();
  menu_rebuild();
}

/**
* Implementation of hook_disable().
* When the module is disabled, the registration product content type becomes a "regular" content type.
*/
function lucas_disable() {
  
  // I took most of this code from uc_product_class_delete_confirm_submit in uc_product.admin.inc
  $type = node_get_types('type', 'registration_product');
  $type->module = 'node';
  $type->custom = 1;
  node_type_save($type);

  db_query("DELETE FROM {uc_product_classes} WHERE pcid = '%s'", 'registration_product');
  module_invoke_all('product_class', 'registration_product', 'delete');
  uc_product_node_info(TRUE);
  node_types_rebuild();
  menu_rebuild();
  
  drupal_set_message(t('The Registration Product content type is no longer a product class.'));
}

/**********************************
 * Ubercart Hook Functions
 **********************************/

/**
* Implementation of hook_product_types().
*/
function lucas_product_types() {
  return array('registration_product');
}

/**
* Implementation of hook_add_to_cart().
* - I DON'T THINK THAT I ACTUALLY NEED THIS RIGHT NOW.
function lucas_add_to_cart($nid, $qty, $data) {
  
  if($data['attributes']) {
  }
  dpm(node_load($nid), "Node");
  dpm($qty, "Quantity");
  dpm($data, "Data");
}*/

/**********************************
 * Webform Hooks
 **********************************/

/**
 * Define callbacks that can be used as select list options.
 *
 * @return
 *   An array of callbacks that can be used for select list options. This array
 *   should be keyed by the "name" of the pre-defined list. The values should
 *   be an array with the following additional keys:
 *     - title: The translated title for this list.
 *     - options callback: The name of the function that will return the list.
 *     - file: Optional. The file containing the options callback, relative to
 *       the module root.
 */
function lucas_webform_select_options_info() {
  $items = array();

  $items['registration_products'] = array(
    'title' => t('Registration Products'),
    'options callback' => 'ldw_options_products',
  );

  return $items;
}

/**
 * Option list containing the days of the week.
 */
function ldw_options_products() {
  
  $products = array();
  
  // http://api.ubercart.org/api/function/uc_product_types/2
  $types = uc_product_types();
  
  $result = db_query("SELECT nid, title FROM {node} WHERE type IN (". db_placeholders($types, 'varchar') .") " ."ORDER BY title", $types);
  
  while ($row = db_fetch_object($result)) {
    $products[$row->nid] = t("$row->title");
  }
  
  return $products;
}

/**
 * Define components to Webform.
 *
 * @return
 *   An array of components, keyed by machine name.
 * 
 * Form more information: http://drupal.org/node/886014
 */
 
function lucas_webform_component_info() {
  $components = array();

  $components['uc_product'] = array(
    'label' => t('Ubercart Product'),
    'description' => t('Add Ubercart Products to your webform.'),
    'features' => array(
      // Add content to CSV downloads. Defaults to TRUE.
      'csv' => TRUE,
      // Show this field in e-mailed submissions. Defaults to TRUE.
      'email' => TRUE,
      // This field may be toggled as required or not. Defaults to TRUE.
      'required' => TRUE,
    )
  );
  
  return $components;
}

/**
 * Respond to a Webform submission being inserted.
 *
 * Note that this hook is called after a submission has already been saved to
 * the database. If needing to modify the submission prior to insertion, use
 * hook_webform_submission_presave().
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that was just inserted into the database.
 */
function lucas_webform_submission_insert($node, $submission) {
  
  $components = $node->webform['components'];  
  $component_ids = array();
  $data = array();  

  foreach ($components as $component) {
    if ($component['type'] == 'uc_product') {
      if (array_key_exists($component['cid'], $submission->data)) {
        $key = $component['cid'];
        foreach ($submission->data[$key]['value'] as $product) {
          if ($product != 0) {
            $attributes = uc_product_get_attributes($product);
            foreach ($attributes as $attribute) {
              if ($attribute->name == 'registration_form_id') {
                $data['attributes']["$attribute->aid"] = $node->nid;
              } elseif ($attribute->name == 'registration_key') {
                $data['attributes']["$attribute->aid"] = 'registration_key_goes_here';
              }
            }
            // TODO: I need to make the quantity a variable here.
            uc_cart_add_item($product, 1, $data); //UC API call
          }
        }
      }
    }
  }
}

/**
 * Respond to a Webform component being inserted into the database.
 * A registration system requires that there exists a hidden "status" field.
 * TO DO: Become less dependent on the user.
 */
function lucas_webform_component_insert($component) {

  $reg_status = false;

  if ($component['type'] == 'uc_product') {
    $node = node_load($component['nid']);
    foreach ($node->webform['components'] as $curr_component) {
      if (($curr_component['type'] == 'hidden') && ($curr_component['form_key'] == 'registration_status')) { 
        $reg_status = true;
        break;
      }
    }
    
    if (!$reg_status) {
      drupal_set_message('For registration to work correctly, you must add a hidden component with a key of "registration_status" with a default value of "Did not complete checkout".');
    }
  }
}

/**********************************
 * Webform API Functions
 **********************************/

/**
 * Specify the default properties of a component.
 *
 * @return
 *   An array defining the default structure of a component.
 */
function _webform_defaults_uc_product() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'email' => 1,
    'mandatory' => 0,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'description' => '',
    ),
  );
}

/**
 * Generate the form for editing a component.
 *
 */
function _webform_edit_uc_product($component) {
  $form = array();

  // Disabling the description if not wanted.
  $form['description'] = array();
  
  // http://api.lullabot.com/uc_product_types
  $types = uc_product_types();
  
  $result = db_query("SELECT nid, title FROM {node} WHERE type IN (". db_placeholders($types, 'varchar') .") " ."ORDER BY title", $types);
  
  while ($row = db_fetch_object($result)) {
    $products[$row->nid] = $row->title;
  }
  
  // Most options are stored in the "extra" array, which stores any settings
  // unique to a particular component type.
  $form['extra']['products'] = array(
    '#type' => 'select',
    '#title' => t('Products'),
    '#default_value' => $component['extra']['products'],
    '#multiple' => TRUE,
    '#description' => t('Please select your products.'),
    '#weight' => -3,
    '#size' => 20,
    '#required' => TRUE,
    '#options' => $products,
  );
  $form['extra']['multiple'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multiple'),
    '#default_value' => $component['extra']['products'],
    '#description' => t('Check this option if the user is allowed to select multiple products.'),
    '#weight' => -2,
  );
  
  return $form;
}

/**
 * Render a Webform component to be part of a form.
 *
 */
function _webform_render_uc_product($component, $value = NULL) {

  $products = array();
  
  foreach($component['extra']['products'] as $val) {
    // I'm using the key here because I set it up originally to be 'nid => title', even though it currently is 'nid => nid'. I'm still not sure why the title never makes it to the database.
    $node = node_load($val);
    
    //<div class="webform-component-' . $component['type'] . '-price" id=webform-component-'. $component['form_key'] . '-price">
    $product_title = '<span>' . t("$node->title") . ', Price: $' . round($node->sell_price, 2) . '</span>';
    $products[$node->nid] = t($product_title);
  }
  
  if ($component['extra']['multiple'] == 0) {
    $form_item = array(
      '#type' => 'radios',
      '#title' => $component['name'],
      '#weight' => $component['weight'],
      '#description'   => _webform_filter_descriptions($component['extra']['description']),
      '#prefix' => '<div class="webform-component-'. $component['type'] .'" id="webform-component-'. $component['form_key'] .'">',
      '#suffix' => '</div>',
      '#options' => $products,
    );
  }
  elseif ($component['extra']['multiple'] == 1) {
    $form_item = array(
      '#type' => 'checkboxes',
      '#title' => $component['name'],
      '#weight' => $component['weight'],
      '#description'   => _webform_filter_descriptions($component['extra']['description']),
      '#prefix' => '<div class="webform-component-'. $component['type'] .'" id="webform-component-'. $component['form_key'] .'">',
      '#suffix' => '</div>',
      '#options' => $products,
    );
  }  
  
  if (isset($value)) {
    $form_item['#default_value'] = $value;
  }
    
  return $form_item;
}

/**
 * Display the result of a submission for a component.
 * 
 */
function _webform_display_uc_product($component, $value, $format = 'html') {

  $products = array();
  
  if (isset($value)) {
    foreach($value as $product) {
      if($product != 0) {
        $node = node_load($product);
        dpm($node, "Node");
        $product_title = t("$node->title") . ', Price: $' . round($node->sell_price, 2);
        array_push($products, t($product_title));
      }
    }
  }
  dpm($component, "Component");
  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_uc_product',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => $products,
  );
}

/**
 * Format the text output for the uc_product component.
 */
function theme_webform_display_uc_product($element) {
  
  // I may need to rethink this in the future.
  if (isset($element['#value'])) {
    $output = theme('item_list', $element['#value']);
  }

  return $output;
}

/**
 * Return the result of a component value for display in a table.
 */
function _webform_table_uc_product($component, $value) {
  
  $results = "";

  if (isset($value)) {
    foreach($value as $product) {
      $node = node_load($product);
      $results .= "$node->model<br>";
    }
  }
 
  return $results;
}

/**
 * Return the header for this component to be displayed in a CSV file.
 *
 * The output of this function will be displayed under the "Results" tab then
 * "Download".
 *
 * @param $component
 *   A Webform component array.
 * @param $export_options
 *   An array of options that may configure export of this field.
 * @return
 *   An array of data to be displayed in the first three rows of a CSV file, not
 *   including either prefixed or trailing commas.
 */
function _webform_csv_headers_uc_product($component, $export_options) {
  $headers = array(
    0 => array(),
    1 => array(),
    2 => array(),
  );

  if ($component['extra']['multiple'] && $export_options['select_format'] == 'separate') {
    $headers[0][] = '';
    $headers[1][] = $component['name'];
  }
  else {
    $headers[0][] = '';
    $headers[1][] = '';
    $headers[2][] = $component['name'];
  }

  return $headers;
}

/**
 * Format the submitted data of a component for CSV downloading.
 *
 * The output of this function will be displayed under the "Results" tab then
 * "Download".
 *
 * @param $component
 *   A Webform component array.
 * @param $export_options
 *   An array of options that may configure export of this field.
 * @param $value
 *   An array of information containing the submission result, directly
 *   correlating to the webform_submitted_data database schema.
 * @return
 *   An array of items to be added to the CSV file. Each value within the array
 *   will be another column within the file. This function is called once for
 *   every row of data.
 *
function _webform_csv_data_uc_product($component, $export_options, $value) {
  $questions = array_keys(_webform_select_options($component['extra']['questions']));
  $return = array();
  foreach ($questions as $key => $question) {
    $return[] = isset($value[$key]) ? $value[$key] : '';
  }
  return $return;
}*/